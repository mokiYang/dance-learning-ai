version: '3.8'

# 生产环境配置 - 包含 nginx 反向代理和独立数据库
# 这个文件用于生产环境部署

services:
  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: dance-learning-postgres
    environment:
      POSTGRES_DB: dance_learning
      POSTGRES_USER: dance_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dance_password_prod}
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dance_user -d dance_learning"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dance-learning-network
    # 生产环境安全配置
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dance-learning-backend
    ports:
      - "8128:8128"
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/temp:/app/temp
      - ./backend/video_storage:/app/video_storage
    environment:
      - FLASK_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://dance_user:${DB_PASSWORD:-dance_password_prod}@postgres:5432/dance_learning
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=dance_learning
      - DB_USER=dance_user
      - DB_PASSWORD=${DB_PASSWORD:-dance_password_prod}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8128/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - dance-learning-network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: dance-learning-frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - dance-learning-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: dance-learning-nginx
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - dance-learning-network

# 数据卷配置
volumes:
  postgres_data:
    driver: local

# 网络配置
networks:
  dance-learning-network:
    driver: bridge